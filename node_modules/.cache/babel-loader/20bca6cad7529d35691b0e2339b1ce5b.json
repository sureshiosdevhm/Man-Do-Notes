{"ast":null,"code":"import React, { useState, useEffect } from 'react';\n\nvar SmoothList = function SmoothList(props) {\n  var _props$animated;\n\n  var _useState = useState(0),\n      maxIsVisible = _useState[0],\n      setMaxIsVisible = _useState[1];\n\n  var delay = props.delay || 50,\n      animated = (_props$animated = props.animated) != null ? _props$animated : true,\n      transitionDuration = props.transitionDuration || 400,\n      visible = typeof props.visible === \"undefined\" ? true : props.visible,\n      WrapperTag = props.wrapperTag || \"div\",\n      ChildTag = props.childTag || \"div\";\n  useEffect(function () {\n    var count = React.Children.count(props.children);\n\n    if (!visible) {\n      count = 0;\n    }\n\n    if (count == maxIsVisible) {\n      var _timeout = setTimeout(function () {\n        if (props.onComplete) props.onComplete();\n      }, transitionDuration);\n\n      return function () {\n        return clearTimeout(_timeout);\n      };\n    }\n\n    var increment = count > maxIsVisible ? 1 : -1;\n    var timeout = setTimeout(function () {\n      setMaxIsVisible(maxIsVisible + increment);\n    }, delay);\n    return function () {\n      return clearTimeout(timeout);\n    };\n  }, [React.Children.count(props.children), delay, maxIsVisible, visible, transitionDuration]);\n  return React.createElement(WrapperTag, {\n    className: props.className\n  }, animated ? React.Children.map(props.children, function (child, i) {\n    return React.createElement(ChildTag, {\n      className: props.childClassName,\n      style: {\n        transition: \"opacity \" + transitionDuration + \"ms, transform \" + transitionDuration + \"ms\",\n        transform: maxIsVisible > i ? \"none\" : \"translateY(20px)\",\n        opacity: maxIsVisible > i ? 1 : 0\n      }\n    }, child);\n  }) : props.children);\n};\n\nexport default SmoothList;","map":{"version":3,"sources":["../src/index.tsx"],"names":["SmoothList","maxIsVisible","setMaxIsVisible","useState","delay","props","animated","transitionDuration","visible","WrapperTag","ChildTag","useEffect","count","React","timeout","setTimeout","clearTimeout","increment","className","childClassName","style","transition","transform","opacity"],"mappings":";;AAcA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA;;;AACf,MAAA,SAAA,GAAwCG,QAAQ,CAAhD,CAAgD,CAAhD;AAAA,MAAOF,YAAP,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,MAAqBC,eAArB,GAAA,SAAA,CAAA,CAAA,CAAA;;AAEA,MAAME,KAAK,GAAGC,KAAK,CAALA,KAAAA,IAAd,EAAA;AAAA,MACMC,QAAQ,GAAA,CAAA,eAAA,GAAGD,KAAK,CAAR,QAAA,KAAA,IAAA,GAAA,eAAA,GADd,IAAA;AAAA,MAEME,kBAAkB,GAAGF,KAAK,CAALA,kBAAAA,IAF3B,GAAA;AAAA,MAGMG,OAAO,GAAG,OAAOH,KAAK,CAAZ,OAAA,KAAA,WAAA,GAAA,IAAA,GAA8CA,KAAK,CAHnE,OAAA;AAAA,MAIMI,UAAU,GAAGJ,KAAK,CAALA,UAAAA,IAJnB,KAAA;AAAA,MAKMK,QAAQ,GAAGL,KAAK,CAALA,QAAAA,IALjB,KAAA;AAOAM,EAAAA,SAAS,CAAC,YAAA;AACN,QAAIC,KAAK,GAAGC,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAqBR,KAAK,CAAtC,QAAYQ,CAAZ;;AACA,QAAI,CAAJ,OAAA,EAAc;AAEVD,MAAAA,KAAK,GAALA,CAAAA;AACH;;AAED,QAAIA,KAAK,IAAT,YAAA,EAA2B;AAEvB,UAAME,QAAO,GAAGC,UAAU,CAAC,YAAA;AACvB,YAAIV,KAAK,CAAT,UAAA,EAAsBA,KAAK,CAALA,UAAAA;AADA,OAAA,EAA1B,kBAA0B,CAA1B;;AAIA,aAAO,YAAA;AAAA,eAAMW,YAAY,CAAlB,QAAkB,CAAlB;AAAP,OAAA;AACH;;AAGD,QAAMC,SAAS,GAAGL,KAAK,GAALA,YAAAA,GAAAA,CAAAA,GAA2B,CAA7C,CAAA;AACA,QAAME,OAAO,GAAGC,UAAU,CAAC,YAAA;AACvBb,MAAAA,eAAe,CAACD,YAAY,GAA5BC,SAAe,CAAfA;AADsB,KAAA,EAA1B,KAA0B,CAA1B;AAIA,WAAO,YAAA;AAAA,aAAMc,YAAY,CAAlB,OAAkB,CAAlB;AAAP,KAAA;AAtBK,GAAA,EAuBN,CACCH,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAqBR,KAAK,CAD3B,QACCQ,CADD,EAAA,KAAA,EAAA,YAAA,EAAA,OAAA,EAvBHF,kBAuBG,CAvBM,CAATA;AA+BA,SACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAYO,IAAAA,SAAS,EAAEb,KAAK,CAACa;AAA7B,GAAA,EACKZ,QAAQ,GAAG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAmBD,KAAK,CAAxB,QAAA,EAAmC,UAAA,KAAA,EAAA,CAAA,EAAA;AAC3C,WACI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACIa,MAAAA,SAAS,EAAEb,KAAK,CAACc,cADrB;AAEIC,MAAAA,KAAK,EAAE;AACPC,QAAAA,UAAU,EAAA,aAAA,kBAAA,GAAA,gBAAA,GAAA,kBAAA,GADH,IAAA;AAEPC,QAAAA,SAAS,EAAErB,YAAY,GAAZA,CAAAA,GAAAA,MAAAA,GAFJ,kBAAA;AAGPsB,QAAAA,OAAO,EAAEtB,YAAY,GAAZA,CAAAA,GAAAA,CAAAA,GAAuB;AAHzB;AAFX,KAAA,EADJ,KACI,CADJ;AADK,GAAG,CAAH,GAaJI,KAAK,CAflB,QACI,CADJ;AAzCJ,CAAA","sourcesContent":["import React, { JSXElementConstructor, PropsWithChildren, useEffect, useState } from \"react\";\n  \ninterface Props {\n    transitionDuration?: number;\n    delay?: number;\n    wrapperTag?: JSXElementConstructor<any>;\n    childTag?: JSXElementConstructor<any>;\n    className?: string;\n    childClassName?: string;\n    visible?: boolean;\n    animated?: boolean;\n    onComplete?: () => any;\n}\n  \nconst SmoothList = (props: PropsWithChildren<Props>) => {\n    const [maxIsVisible, setMaxIsVisible] = useState(0);\n\n    const delay = props.delay || 50,\n          animated = props.animated ?? true,\n          transitionDuration = props.transitionDuration || 400,\n          visible = typeof props.visible === \"undefined\" ? true : props.visible,\n          WrapperTag = props.wrapperTag || \"div\",\n          ChildTag = props.childTag || \"div\";\n  \n    useEffect(() => {\n        let count = React.Children.count(props.children);\n        if (!visible) {\n            // Animate all children out\n            count = 0;\n        }\n\n        if (count == maxIsVisible) {\n            // We're done updating maxVisible, notify when animation is done\n            const timeout = setTimeout(() => {\n                if (props.onComplete) props.onComplete();\n            }, transitionDuration);\n            \n            return () => clearTimeout(timeout)\n        }\n\n        // Move maxIsVisible toward count\n        const increment = count > maxIsVisible ? 1 : -1;\n        const timeout = setTimeout(() => {\n            setMaxIsVisible(maxIsVisible + increment);\n        }, delay);\n        \n        return () => clearTimeout(timeout)\n    }, [\n        React.Children.count(props.children),\n        delay,\n        maxIsVisible,\n        visible,\n        transitionDuration,\n    ])\n  \n    return (\n        <WrapperTag className={props.className}>\n            {animated ? React.Children.map(props.children, (child, i) => {\n                return (\n                    <ChildTag\n                        className={props.childClassName}\n                        style={{\n                        transition: `opacity ${transitionDuration}ms, transform ${transitionDuration}ms`,\n                        transform: maxIsVisible > i ? \"none\" : \"translateY(20px)\",\n                        opacity: maxIsVisible > i ? 1 : 0,\n                        }}\n                    >\n                        {child}\n                    </ChildTag>\n                )\n            }) : props.children}\n        </WrapperTag>\n    )\n}\n\nexport default SmoothList;"]},"metadata":{},"sourceType":"module"}