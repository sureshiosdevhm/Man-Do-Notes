import React, { useState, useEffect } from 'react';

var SmoothList = function SmoothList(props) {
  var _props$animated;

  var _useState = useState(0),
      maxIsVisible = _useState[0],
      setMaxIsVisible = _useState[1];

  var delay = props.delay || 50,
      animated = (_props$animated = props.animated) != null ? _props$animated : true,
      transitionDuration = props.transitionDuration || 400,
      visible = typeof props.visible === "undefined" ? true : props.visible,
      WrapperTag = props.wrapperTag || "div",
      ChildTag = props.childTag || "div";
  useEffect(function () {
    var count = React.Children.count(props.children);

    if (!visible) {
      count = 0;
    }

    if (count == maxIsVisible) {
      var _timeout = setTimeout(function () {
        if (props.onComplete) props.onComplete();
      }, transitionDuration);

      return function () {
        return clearTimeout(_timeout);
      };
    }

    var increment = count > maxIsVisible ? 1 : -1;
    var timeout = setTimeout(function () {
      setMaxIsVisible(maxIsVisible + increment);
    }, delay);
    return function () {
      return clearTimeout(timeout);
    };
  }, [React.Children.count(props.children), delay, maxIsVisible, visible, transitionDuration]);
  return React.createElement(WrapperTag, {
    className: props.className
  }, animated ? React.Children.map(props.children, function (child, i) {
    return React.createElement(ChildTag, {
      className: props.childClassName,
      style: {
        transition: "opacity " + transitionDuration + "ms, transform " + transitionDuration + "ms",
        transform: maxIsVisible > i ? "none" : "translateY(20px)",
        opacity: maxIsVisible > i ? 1 : 0
      }
    }, child);
  }) : props.children);
};

export default SmoothList;
//# sourceMappingURL=index.modern.js.map
